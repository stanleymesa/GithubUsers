def keyProperties = new Properties()
def keyPropertiesFile = rootProject.file("app.properties")
keyProperties.load(new FileInputStream(keyPropertiesFile))

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
localProperties.load(new FileInputStream(localPropertiesFile))

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'com.google.dagger.hilt.android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'org.jetbrains.kotlin.plugin.serialization'
apply plugin: 'org.jetbrains.kotlin.plugin.compose'
apply plugin: 'kotlin-kapt'

android {
    compileSdk keyProperties["sdk.compile"].toInteger()
    namespace AppConfig.moduleNameSpace

    defaultConfig {
        minSdk keyProperties["sdk.min"].toInteger()
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        consumerProguardFiles("consumer-rules.pro")
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
        buildConfigField("int", "VERSION_CODE", keyProperties["app.version.code"])
        buildConfigField("String", "VERSION_NAME", "\"${keyProperties["app.version.name"]}\"")
        buildConfigField("String", "GITHUB_API_TOKEN", "\"${localProperties["github.api.token"]}\"")
        buildConfigField("String", "APPLICATION_ID", "\"${AppConfig.moduleNameSpace}\"")
    }

    buildTypes {
        debug {
//            buildConfigField("String", "BASE_URL", "\"${keyProperties["baseUrl.dev"]}\"")
            buildConfigField("String", "BASE_URL", "\"${keyProperties["baseUrl.stag"]}\"")
//            buildConfigField("String", "BASE_URL", "\"${keyProperties["baseUrl.prod"]}\"")
            debuggable true
        }
        release {
//            buildConfigField("String", "BASE_URL", "\"${keyProperties["baseUrl.dev"]}\"")
            buildConfigField("String", "BASE_URL", "\"${keyProperties["baseUrl.stag"]}\"")
//            buildConfigField("String", "BASE_URL", "\"${keyProperties["baseUrl.prod"]}\"")
            debuggable false
            minifyEnabled false
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    buildFeatures {
        dataBinding true
        buildConfig true
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17.toString()
        freeCompilerArgs = freeCompilerArgs + "-opt-in=kotlin.RequiresOptIn"

        // Enable experimental coroutines APIs, including Flow
        freeCompilerArgs = freeCompilerArgs + "-opt-in=kotlin.Experimental"

        // Enable experimental compose APIs
//        freeCompilerArgs =
//                freeCompilerArgs + "-opt-in=androidx.compose.material.ExperimentalMaterialApi"
//        freeCompilerArgs =
//                freeCompilerArgs + "-opt-in=androidx.compose.animation.ExperimentalAnimationApi"
//        freeCompilerArgs =
//                freeCompilerArgs + "-opt-in=androidx.compose.ui.ExperimentalComposeUiApi"
//        freeCompilerArgs =
//                freeCompilerArgs + "-opt-in=androidx.compose.foundation.ExperimentalFoundationApi"
//        freeCompilerArgs =
//                freeCompilerArgs + "-opt-in=androidx.compose.foundation.layout.ExperimentalLayoutApi"
    }
    buildFeatures {
        compose true
        buildConfig true
    }
}

dependencies {
    // AndroidX dependencies
    implementation(libs.core.ktx)
    implementation(libs.appcompat)
    implementation(libs.lifecycle.runtime.ktx)
    implementation(libs.activity.compose)
    implementation(libs.compose.navigation)
    implementation(libs.datastore)

    // Compose dependencies
    implementation(platform(libs.compose.bom))
    implementation(libs.compose.ui)
    implementation(libs.compose.ui.graphics)
    implementation(libs.compose.material3)

    // Third-party libraries
    implementation(libs.material)
    implementation(libs.coil)
    implementation(libs.timber)
    implementation(libs.hilt.navigation.compose)
    implementation(libs.hilt.android)
    implementation(libs.moshi)
    implementation(libs.moshi.kotlin)
    implementation(libs.retrofit.converter.moshi)
    kapt(libs.hilt.compiler)

    // Test dependencies
    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.test.ext.junit)
    androidTestImplementation(libs.espresso.core)

    // Compose specific test dependencies
    debugImplementation(libs.compose.ui.tooling)
    debugImplementation(libs.compose.ui.tooling.preview)
    androidTestImplementation(libs.compose.ui.test.junit4)
    debugImplementation(libs.compose.ui.test.manifest)
}